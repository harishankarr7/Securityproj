First, we will import the necessary libraries, including dm-haiku, optax, and TensorFlow Datasets. We will also define some utility functions for loading and preprocessing the MNIST dataset.
!pip install dm-haiku
!pip install optax
import dataclasses
import haiku as hk
import jax
import jax.numpy as jnp
import math
import matplotlib.pyplot as plt
import numpy as np
import optax
import tensorflow_datasets as tfds
import tqdm
from typing import Tuple
from typing import Tuple
def load_mnist() -> Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:
    def preprocess(x, y):
        x = tf.image.convert_image_dtype(x, tf.float32)
        return x, y
    train_ds = tfds.load('mnist', split='train', as_supervised=True)
    train_ds = train_ds.map(preprocess).shuffle(1024).batch(128)

    test_ds = tfds.load('mnist', split='test', as_supervised=True)
    test_ds = test_ds.map(preprocess).batch(128)
    train_images, train_labels = next(iter(train_ds))
    test_images, test_labels = next(iter(test_ds))
    train_images = np.array(train_images).reshape(-1, 28 * 28)
    train_labels = np.array(train_labels)
    test_images = np.array(test_images).reshape(-1, 28 * 28)
    test_labels = np.array(test_labels)
    return train_images, train_labels, test_images, test_labels
Next, we define the shadow model and shadow target pairs, and train a reconstructor network on the shadow models and targets.
def shadow_models(dataset: np.ndarray, targets: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:
    rng = hk.PRNGSequence(42)
    params = []
    for target in tqdm.tqdm(targets):
        net = hk.Sequential([
            hk.Linear(512), jax.nn.relu,
            hk.Linear(512), jax.nn.relu,
            hk.Linear(10)
        ])
opt = optax.adam(1e-3)
        opt_state = opt.init(net.params)
        loss_fn = jax.nn.softmax_cross_entropy_with_logits
        for _ in range(50):
            idx = np.random.choice(len(dataset), size=128, replace=False)
            x, y = dataset[idx], targets[idx]
            y_onehot = np.eye(10)[y]

            grads = jax.grad(loss_fn)(net.params, x, y_one

